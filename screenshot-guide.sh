#!/bin/bash

# Screenshot Capture Guide for TeamCity Article
# This script helps you prepare and capture all necessary screenshots

echo "ðŸ“¸ TeamCity Article Screenshot Preparation Guide"
echo "================================================"
echo ""

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=== PART 1: TeamCity Cloud Setup (Recommended) ===${NC}"
echo ""
echo "1. Sign up for TeamCity Cloud:"
echo "   â†’ https://www.jetbrains.com/teamcity/cloud/"
echo "   â†’ Use your GitHub account for quick setup"
echo ""
echo "2. Create a new project:"
echo "   â†’ Click 'New Project'"
echo "   â†’ Import from GitHub: https://github.com/[your-username]/flaky-test-demo"
echo "   â†’ Or use 'Manual Setup' and upload the demo folder"
echo ""
echo "3. Configure Build:"
echo "   â†’ TeamCity auto-detects Node.js"
echo "   â†’ Add build step: 'npm install'"
echo "   â†’ Add build step: 'npm run test:junit'"
echo "   â†’ Enable 'XML Test Reporting' with pattern: '**/test-results/*.xml'"
echo ""

echo -e "${GREEN}=== Screenshots to Capture in TeamCity ===${NC}"
echo ""
echo "ðŸ“· SCREENSHOT 1: Initial Build Failure"
echo "   - Run the first build"
echo "   - Capture the failed build overview"
echo "   - Shows mix of failures without classification"
echo ""
echo "ðŸ“· SCREENSHOT 2: After 3-5 Builds - Flaky Detection"
echo "   - Navigate to 'Tests' tab"
echo "   - Capture showing:"
echo "     â€¢ Flaky test indicators (special icons)"
echo "     â€¢ 'Flaky' label next to test names"
echo "     â€¢ Failure rate percentages (e.g., 'Fails 33% of the time')"
echo ""
echo "ðŸ“· SCREENSHOT 3: Test History Timeline"
echo "   - Click on a flaky test (e.g., 'async operation without proper wait')"
echo "   - Capture the test history graph showing:"
echo "     â€¢ Pass/fail pattern over builds"
echo "     â€¢ Statistical analysis"
echo "     â€¢ Environmental factors"
echo ""
echo "ðŸ“· SCREENSHOT 4: Build Status Intelligence"
echo "   - Go to build overview"
echo "   - Capture status showing:"
echo "     â€¢ 'Success with flaky test failures'"
echo "     â€¢ Build is GREEN despite test failures"
echo "     â€¢ Clear distinction from real failures"
echo ""
echo "ðŸ“· SCREENSHOT 5: Test Categories View"
echo "   - In Tests tab, use filters"
echo "   - Show three categories:"
echo "     â€¢ Flaky Tests (with count)"
echo "     â€¢ Failed Tests (genuine failures)"
echo "     â€¢ Passed Tests"
echo ""
echo "ðŸ“· SCREENSHOT 6: Investigation Assignment"
echo "   - Click 'Investigate' on a flaky test"
echo "   - Show assignment dialog"
echo "   - Capture investigation tracking UI"
echo ""
echo "ðŸ“· SCREENSHOT 7: Muted Tests View"
echo "   - Navigate to 'Muted Tests' tab"
echo "   - Show muted flaky tests still running"
echo "   - Capture visibility despite muting"
echo ""

echo -e "${YELLOW}=== PART 2: Jenkins Setup for Comparison ===${NC}"
echo ""
echo "1. Start Jenkins:"
echo "   docker-compose up -d jenkins"
echo ""
echo "2. Initial Setup:"
echo "   - Get password: docker-compose exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword"
echo "   - Install suggested plugins"
echo "   - Install: NodeJS Plugin, Test Results Analyzer"
echo ""
echo "3. Create Pipeline Job:"
echo "   - New Item â†’ Pipeline"
echo "   - Copy Jenkinsfile content"
echo "   - Run build multiple times"
echo ""

echo -e "${GREEN}=== Screenshots to Capture in Jenkins ===${NC}"
echo ""
echo "ðŸ“· SCREENSHOT 8: Jenkins Test Results - No Intelligence"
echo "   - Show basic pass/fail view"
echo "   - No flaky indicators"
echo "   - All failures look the same"
echo ""
echo "ðŸ“· SCREENSHOT 9: Jenkins Manual Retry Configuration"
echo "   - Show Jenkinsfile with retry blocks"
echo "   - Capture complex scripting needed"
echo ""
echo "ðŸ“· SCREENSHOT 10: Jenkins Plugin Configuration"
echo "   - Manage Jenkins â†’ Manage Plugins"
echo "   - Show list of required plugins for basic flaky handling"
echo ""
echo "ðŸ“· SCREENSHOT 11: Jenkins Test History - Manual Investigation"
echo "   - Click through multiple builds"
echo "   - Show tedious manual process"
echo "   - No pattern detection"
echo ""

echo -e "${BLUE}=== PART 3: Side-by-Side Comparison ===${NC}"
echo ""
echo "ðŸ“· SCREENSHOT 12: Dashboard Comparison"
echo "   - TeamCity: Rich test insights dashboard"
echo "   - Jenkins: Basic build status only"
echo ""
echo "ðŸ“· SCREENSHOT 13: Single Test Comparison"
echo "   - Same flaky test in both tools"
echo "   - TeamCity: Shows flakiness rate, history, patterns"
echo "   - Jenkins: Just shows last result"
echo ""

echo -e "${GREEN}=== Pro Tips for Screenshots ===${NC}"
echo ""
echo "âœ… Use consistent browser window size (1920x1080 recommended)"
echo "âœ… Clear browser cache between TeamCity/Jenkins for clean UI"
echo "âœ… Use browser zoom at 100% for clarity"
echo "âœ… Highlight key areas with arrows/boxes in post-processing"
echo "âœ… Ensure test names are clearly visible"
echo "âœ… Capture full UI context, not just snippets"
echo ""

echo -e "${YELLOW}=== Annotation Suggestions ===${NC}"
echo ""
echo "For each screenshot, consider adding:"
echo "â€¢ Red boxes around key features"
echo "â€¢ Arrows pointing to flaky indicators"
echo "â€¢ Side notes explaining what to look for"
echo "â€¢ Before/after comparisons on same page"
echo ""

echo -e "${BLUE}=== Additional Visual Assets ===${NC}"
echo ""
echo "Consider creating:"
echo "1. Animated GIF showing test status changing over builds"
echo "2. Time-lapse of 5 builds showing pattern emergence"
echo "3. Workflow diagram: TeamCity's intelligent detection process"
echo "4. Comparison table as an image"
echo "5. ROI calculation visualization"
echo ""

echo "Ready to capture screenshots! ðŸ“¸"
